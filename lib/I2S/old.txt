
const stm32_af_pin_list_type chip_af_i2s_ck [] = {
//I2S1
    { SPI1  , GPIOA, GPIO_PIN_5  , GPIO_AF5_SPI1  }, 
    { SPI1  , GPIOB, GPIO_PIN_3  , GPIO_AF5_SPI1  }, 
    { SPI1  , GPIOG, GPIO_PIN_11 , GPIO_AF5_SPI1  }, 
//I2S2
    { SPI2  , GPIOA, GPIO_PIN_9  , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOA, GPIO_PIN_12 , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOB, GPIO_PIN_10 , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOB, GPIO_PIN_13 , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOD, GPIO_PIN_3  , GPIO_AF5_SPI2  }, 
//I2S3
    { SPI3  , GPIOB, GPIO_PIN_3  , GPIO_AF6_SPI3  }, 
    { SPI3  , GPIOC, GPIO_PIN_10 , GPIO_AF6_SPI3  }, 
}; 

const stm32_af_pin_list_type chip_af_i2s_mck [] = {
//I2S1
    { SPI1  , GPIOC, GPIO_PIN_4  , GPIO_AF5_SPI1  }, 
//I2S2
    { SPI2  , GPIOC, GPIO_PIN_6  , GPIO_AF5_SPI2  }, 
//I2S3
    { SPI3  , GPIOC, GPIO_PIN_7  , GPIO_AF6_SPI3  }, 
}; 

const stm32_af_pin_list_type chip_af_i2s_sd [] = {
//I2S1
    { SPI1  , GPIOA, GPIO_PIN_7  , GPIO_AF5_SPI1  }, 
    { SPI1  , GPIOB, GPIO_PIN_5  , GPIO_AF5_SPI1  }, 
    { SPI1  , GPIOD, GPIO_PIN_7  , GPIO_AF5_SPI1  }, 
//I2S2
    { SPI2  , GPIOB, GPIO_PIN_15 , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOC, GPIO_PIN_1  , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOC, GPIO_PIN_3  , GPIO_AF5_SPI2  }, 
//I2S3
    { SPI3  , GPIOB, GPIO_PIN_2  , GPIO_AF7_SPI3  }, 
    { SPI3  , GPIOB, GPIO_PIN_5  , GPIO_AF6_SPI3  }, 
    { SPI3  , GPIOC, GPIO_PIN_12 , GPIO_AF6_SPI3  }, 
    { SPI3  , GPIOD, GPIO_PIN_6  , GPIO_AF5_SPI3  }, 
}; 

const stm32_af_pin_list_type chip_af_i2s_ws [] = {
//I2S1
    { SPI1  , GPIOA, GPIO_PIN_4  , GPIO_AF5_SPI1  }, 
    { SPI1  , GPIOA, GPIO_PIN_15 , GPIO_AF5_SPI1  }, 
    { SPI1  , GPIOG, GPIO_PIN_10 , GPIO_AF5_SPI1  }, 
//I2S2
    { SPI2  , GPIOA, GPIO_PIN_11 , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOB, GPIO_PIN_4  , GPIO_AF7_SPI2  }, 
    { SPI2  , GPIOB, GPIO_PIN_9  , GPIO_AF5_SPI2  }, 
    { SPI2  , GPIOB, GPIO_PIN_12 , GPIO_AF5_SPI2  }, 
//I2S3
    { SPI3  , GPIOA, GPIO_PIN_4  , GPIO_AF6_SPI3  }, 
    { SPI3  , GPIOA, GPIO_PIN_15 , GPIO_AF6_SPI3  }, 
}; 

int8_t stm32AfGet(const stm32_af_pin_list_type list[], int size, const void *instance, const GPIO_TypeDef *port, const uint32_t pin) {
    for(int i=0; i<size; i++) {
        if (instance == list[i].instance
            && port == list[i].port
            && pin == list[i].pin) {
                
            return list[i].alternate;
        }
    }
    return 0;
}

GPIO_TypeDef *stm32AfGetDefault(const stm32_af_pin_list_type list[], int size, const void *instance, uint32_t *pin) {
    for(int i=0; i<size; i++) {
        if (instance == list[i].instance) {
            *pin = list[i].pin;
            return list[i].port;
        }
    }
    return NULL;
}

void stm32GpioClockEnable(GPIO_TypeDef *port) {
    

    if (port == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE();

    if (port == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE();

    if (port == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE();

    if (port == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE();
}


void stm32AfInitSpeed(const stm32_af_pin_list_type list[], int size, const void *instance, GPIO_TypeDef *port, uint32_t pin, uint32_t mode, uint32_t pull, uint32_t speed) {
    // if (stm32_pwm_disable_callback != NULL) {
    //     (*stm32_pwm_disable_callback)(port, pin);
    // }
    if (port == NULL) {
        port = stm32AfGetDefault(list, size, instance, &pin);
    }

    stm32GpioClockEnable(port);
    
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = pin;
    GPIO_InitStruct.Mode = mode;
    GPIO_InitStruct.Pull = pull;
    GPIO_InitStruct.Speed = speed;
    GPIO_InitStruct.Alternate = stm32AfGet(list, size, instance, port, pin);
    HAL_GPIO_Init(port, &GPIO_InitStruct);
}

void stm32AfInit(const stm32_af_pin_list_type list[], int size, const void *instance, GPIO_TypeDef *port, uint32_t pin, uint32_t mode, uint32_t pull) {
    stm32AfInitSpeed(list, size, instance, port, pin, mode, pull, GPIO_SPEED_FREQ_VERY_HIGH);
}

void stm32AfI2SInit(const SPI_TypeDef *instance,
    GPIO_TypeDef *sdPort, uint32_t sdPin,
    GPIO_TypeDef *wsPort, uint32_t wsPin,
    GPIO_TypeDef *ckPort, uint32_t ckPin) {

    stm32AfInit(chip_af_i2s_sd, sizeof(chip_af_i2s_sd) / sizeof(chip_af_i2s_sd[0]), instance, sdPort, sdPin, GPIO_MODE_AF_PP, GPIO_NOPULL);
    stm32AfInit(chip_af_i2s_ws, sizeof(chip_af_i2s_ws) / sizeof(chip_af_i2s_ws[0]), instance, wsPort, wsPin, GPIO_MODE_AF_PP, GPIO_NOPULL);
    stm32AfInit(chip_af_i2s_ck, sizeof(chip_af_i2s_ck) / sizeof(chip_af_i2s_ck[0]), instance, ckPort, ckPin, GPIO_MODE_AF_PP, GPIO_NOPULL);
}

typedef struct {
    void *periphInstance;
    dmaRequest request;
    DMA_Stream_TypeDef *dmaInstance;
    uint32_t channel;
    uint8_t dmaHandlesIndex;
    IRQn_Type irqN;
} dma_request_to_instance_t;

const dma_request_to_instance_t dmaRequestToStream[] = {
    {SPI1, SPI_TX, DMA2_Stream3, DMA_CHANNEL_3, 3 + 8, DMA2_Stream3_IRQn},
    {SPI1, SPI_RX, DMA2_Stream0, DMA_CHANNEL_3, 0 + 8, DMA2_Stream0_IRQn},

    {SPI2, SPI_TX, DMA1_Stream4, DMA_CHANNEL_0, 4, DMA1_Stream4_IRQn},
    {SPI2, SPI_RX, DMA1_Stream3, DMA_CHANNEL_0, 3, DMA1_Stream3_IRQn},

    {SPI3, SPI_TX, DMA1_Stream5, DMA_CHANNEL_0, 5, DMA1_Stream5_IRQn},
    {SPI3, SPI_RX, DMA1_Stream0, DMA_CHANNEL_0, 0, DMA1_Stream0_IRQn},

    //{SDIO, SDIO_RXTX, DMA2_Stream6, DMA_CHANNEL_4, 6 + 8, DMA2_Stream6_IRQn},
    //{SDIO, SDIO_RXTX, DMA2_Stream3, DMA_CHANNEL_4, 3 + 8, DMA2_Stream3_IRQn},

    {SDMMC1, SDIO_RXTX, DMA2_Stream6, DMA_CHANNEL_4, 6 + 8, DMA2_Stream6_IRQn},
    {SDMMC1, SDIO_RXTX, DMA2_Stream3, DMA_CHANNEL_4, 3 + 8, DMA2_Stream3_IRQn},


};

inline static void setDmaInstance(DMA_HandleTypeDef *handle, dma_request_to_instance_t dmaRequestToStream) {
    handle->Instance = dmaRequestToStream.dmaInstance;
    handle->Init.Channel = dmaRequestToStream.channel;
}

DMA_HandleTypeDef *dmaHandles[16];
bool reserved[16];

// F2, F4, F7
extern void DMA1_Stream0_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[0]);
}

// F2, F4, F7
extern void DMA1_Stream1_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[1]);
}

// F2, F4, F7
extern void DMA1_Stream2_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[2]);
}

// F2, F4, F7
extern void DMA1_Stream3_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[3]);
}

// F2, F4, F7
extern void DMA1_Stream4_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[4]);
}

// F2, F4, F7
extern void DMA1_Stream5_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[5]);
}

// F2, F4, F7
extern void DMA1_Stream6_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[6]);
}

// F2, F4, F7
extern void DMA1_Stream7_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[7]);
}

// F2, F4, F7
extern void DMA2_Stream0_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[0 + 8]);
}

// F2, F4, F7
extern void DMA2_Stream1_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[1 + 8]);
}

// F2, F4, F7
extern void DMA2_Stream2_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[2 + 8]);
}

// F2, F4, F7
extern void DMA2_Stream3_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[3 + 8]);
}

// F2, F4, F7
extern void DMA2_Stream4_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[4 + 8]);
}

// F2, F4, F7
extern void DMA2_Stream5_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[5 + 8]);
}

// F2, F4, F7
extern void DMA2_Stream6_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[6 + 8]);
}

// F2, F4, F7
extern void DMA2_Stream7_IRQHandler() {
    HAL_DMA_IRQHandler(dmaHandles[7 + 8]);
}

bool stm32DmaAcquire(DMA_HandleTypeDef *handle, dmaRequest request, void *periphInstance,  bool enableIrq) {
    if (handle->Instance != NULL) {
        return true;
    }

    for(size_t i=0; i<sizeof(dmaRequestToStream) / sizeof(dmaRequestToStream[0]); i++) {
        int dmaHandlesIndex = dmaRequestToStream[i].dmaHandlesIndex;
        if (!reserved[dmaHandlesIndex]
              && dmaRequestToStream[i].request == request
              && dmaRequestToStream[i].periphInstance == periphInstance
            ) {

            setDmaInstance(handle, dmaRequestToStream[i]);

            if (enableIrq) {
                HAL_NVIC_SetPriority(dmaRequestToStream[i].irqN, 0, 0);
                HAL_NVIC_EnableIRQ(dmaRequestToStream[i].irqN);
            }

            if (dmaHandles[dmaHandlesIndex]) {
                dmaHandles[dmaHandlesIndex]->Instance = NULL;
            }

            dmaHandles[dmaHandlesIndex] = handle;
            reserved[dmaHandlesIndex] = true;

            return true;
        }
    }
    return false;
}